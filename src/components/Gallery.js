// components/Gallery.js
import { useState, useEffect } from "react";
import ImagePopup from "./ImagePopUp";

export default function Gallery() {
  const [images, setImages] = useState([]);
  const [selectedImage, setSelectedImage] = useState(null);
  const API_BASE = process.env.API_BASE

  useEffect(() => {
    fetch("/api/images")
      .then((res) => {
        console.log("API Response Status:", res.status);
        console.log("Response Headers:", res.headers.get("content-type"));
        if (!res.ok) {
          throw new Error(`HTTP error! status: ${res.status}`);
        }
        return res.json();
      })
      .then((data) => {
        console.log("Fetched Images:", data);
        if (data.length === 0) {
          console.log("No images found.");
        }
        setImages(data);
      })
      .catch((error) => console.error("Error fetching images:", error));
  }, []);

  const handleImageClick = (img) => {
    setSelectedImage(img);
  };

  return (
    <>
    <div className="title">
      kaleidoscope Gallery
    </div>
    <div className="general">
      <p >Kaleidoscope Gallery is a cyber-curation exploring Generative AI, specifically text-to-image (T2I) models, and ethics. Below are images generated by various T2I models from carefully crafted prompts sourced from interviews with experts in ethics. You may chose any prompt (definition or practice) from any five ethical theory and generate an image with a T2I model of your choice (occurs externally). Once you have done so, add the image to the curation to create the collective gallery. The gallery is living and continuously collects generated imagery to capture the kaleidoscoping nature of GenAI and ethics.  </p>
    </div>
    <div className="gallery-container">
      {images.map((img) => (
        <div key={img.path} className="image-container">
          {/* Tooltip */}
          <div className="tooltip">{img.folder}</div>
          <img key={img.path} src={img.path} alt="Gallery"           
          className="cursor-pointer rounded-lg shadow-md"
          title={img.folder} 
          onClick={() => handleImageClick(img)}/>
        </div>
      ))}
      {selectedImage && <ImagePopup image={selectedImage} onClose={() => setSelectedImage(null)} />}
    </div>
    </>
  );
}